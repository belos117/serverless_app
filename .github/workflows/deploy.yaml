name: Deploy Serverless Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
  TF_TOKEN: ${{ secrets.TF_TOKEN }}
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.7
  PYTHON_VERSION: 3.12

permissions:
  contents: read
  id-token: write

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Terraform security scan
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: false

      - name: Security check - Bandit
        uses: ./
        with:
          python_version: ${{ env.PYTHON_VERSION }}
          project_path: ./src/
          ignore_failure: true

      - name: Security check report artifacts
        uses: actions/upload-artifact@v4
        # if: failure()
        with:
          name: Security report
          path: output/security_report.txt
  test:
    name: Test
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest boto3

      - name: Run tests
        run: |
          pytest ./tests/

  deploy:
    name: Deploy
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: "${{ secrets.AWS_ACCESS_KEY }}"
          aws-secret-access-key: "${{ secrets.AWS_SECRET_KEY }}"
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install boto3

      - name: Package Lambda functions
        run: |
          cd src
          zip -j insertStudentData.zip insertStudentData.py
          zip -j getStudents.zip getStudents.py            
      
      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan
        env:
          TF_VAR_alarm_email: ${{ secrets.ALARM_EMAIL }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd terraform
          terraform apply -auto-approve tfplan

      - name: Run Post-deployment Tests
        run: |
          python ./tests/integration_tests.py
        env:
          API_ENDPOINT: ${{ steps.terraform-output.outputs.api_endpoint }}